import React, { useEffect, useContext, useRef, useState } from "react";
import { useTranslation } from "next-i18next";
import { serverSideTranslations } from "next-i18next/serverSideTranslations";
import Head from "next/head";
import axios from "axios";
import Image from "next/image";
import { useRouter } from "next/router";
import { GetStaticProps, NextPage } from "next";
import { format } from "date-fns";
import styles from "../styles/Home.module.scss";
import AuthContext from "context/auth-context";
import Navigation from "@components/Navigation/Navigation";
import Title from "@components/Title/Title";
import { NewsType } from "type";
import NewsCard from "@components/NewsCard/NewsCard";
import ErrorDialogContext from "context/error-dialog-context";
import Welcome from "@components/Welcome/Welcome";
import ShopAndTour from "@components/ShopAndTour/ShopAndTour";
import TransportInfo from "@components/TransportInfo/TransportInfo";
import Footer from "@components/Footer/Footer";
import HamStatusContext from "context/ham-status-context";
import WorkIn from "@components/WorkIn/WorkIn";
import { useSession } from "next-auth/react";

interface HomeProps {}
const Home: NextPage<HomeProps> = (props) => {
  const authContext = useContext(AuthContext);
  const errorDialog = useContext(ErrorDialogContext);
  const { isHamOpen, handleClose } = useContext(HamStatusContext);
  const { asPath } = useRouter();
  const { data: session } = useSession();
  const [newsData, setNewsData] = useState<NewsType[]>([]);
  const { t } = useTranslation(["indexPage", "common"]);

  const handleLineData = async () => {
    const code = asPath.split("?")[1].split("&")[0].split("=")[1];
    const lineReqObj = new URLSearchParams();
    let lineRtData;
    let lineIdToken: string;
    lineReqObj.append("grant_type", "authorization_code");
    lineReqObj.append("code", code);
    lineReqObj.append("redirect_uri", "http://localhost:3000");
    lineReqObj.append("client_id", "1657802989");
    lineReqObj.append("client_secret", "127f597ea34d821d570ff9e7446b320f");

    const result = await axios({
      url: "https://api.line.me/oauth2/v2.1/token",
      method: "POST",
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
      },
      data: lineReqObj,
    }).then((value) => {
      lineRtData = value.data;
      lineIdToken = value.data.id_token;
      console.log(`lineRtData`, lineRtData);
      console.log(lineIdToken);
    });

    const finialData = new URLSearchParams();
    finialData.append("id_token", lineIdToken!);
    finialData.append("client_id", "1657802989");
    const data = await axios({
      url: "https://api.line.me/oauth2/v2.1/verify",
      method: "POST",
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
      },
      data: finialData,
    }).then((value) => {
      localStorage.setItem(
        "user",
        JSON.stringify({
          name: value.data.email,
          emailAddress: value.data.name,
          userPicture: value.data.picture,
        })
      );

      console.log(`lineFinialData`, value);
      authContext.onLogin();
    });
  };

  const handleNewsData = async () => {
    const { data, status } = await axios.get(
      "https://newsapi.org/v2/top-headlines?country=tw&apiKey=e6f47c19804a411ba773c0d5f303edcf"
    );

    console.log(data, status);
    if (status === 200 && data.articles.length > 0) {
      setNewsData(data.articles);
      return;
    }
    if (status === 200 && data.articles.length === 0) {
      return;
    }
    if (status !== 200) {
      errorDialog.onOpen();
    }
  };
  useEffect(() => {
    console.log(asPath, asPath.length);
    if (asPath.includes("error")) {
      return;
    }
    if (asPath.includes("code") && asPath.length < 52) {
      handleLineData();
      return;
    }

    //news Data
    handleNewsData();
  }, []);
  useEffect(() => {
    handleClose();
  }, []);

  return (
    <>
      <Head>
        <title> Tuā-tiū-tiânn</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/asset/index/logo-v2.png" />
      </Head>

      <main className={isHamOpen ? styles.unScrollPage : styles.main}>
        <Navigation />
        <div className={styles.cover_3d}>
          <WorkIn />
        </div>
        <div className={styles.cover}>
          <Image
            width={500}
            height={500}
            src="/assets/index/slide1.jpg"
            alt={"cover-image"}
            style={{ overflow: "hidden" }}
          />
        </div>

        <div>
          <Title title={t("news")} icon="/assets/index/news.png" />
          <div
            style={{
              width: "70%",
              margin: "2rem auto",
              textAlign: "center",
            }}
          >
            {newsData.length === 0 && <div>目前沒有最新消息</div>}
            {newsData.length > 0 &&
              newsData
                .filter((news) => news.urlToImage !== null)
                .filter((news, index) => index < 3)
                .map((news) => {
                  return (
                    <NewsCard
                      key={news.url}
                      src={news.urlToImage}
                      title={news.title}
                      time={format(new Date(news.publishedAt), "yyyy-MM-dd ")}
                      link={news.url}
                    />
                  );
                })}
          </div>
          <div>
            <Title title={t("welcome")} icon="/assets/index/tea.png" />
            <Welcome />
          </div>
          <div>
            <Title
              title={t("stores_and_tours")}
              icon="/assets/index/search.png"
            />
            <ShopAndTour />
          </div>
          <div>
            <Title title={t("transport")} icon="/assets/index/walk.png" />
            <TransportInfo />
          </div>
          <Footer />
        </div>
      </main>
    </>
  );
};

export default Home;

export const getStaticProps: GetStaticProps<HomeProps> = async (context) => {
  const locale = context.locale!;

  return {
    props: {
      ...(await serverSideTranslations(locale, ["indexPage", "common"])),
    },
  };
};
